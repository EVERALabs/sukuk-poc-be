package main

import (
	"sukuk-be/internal/config"
	"sukuk-be/internal/database"
	"sukuk-be/internal/logger"
	"sukuk-be/internal/server"
	"sukuk-be/internal/services"
	"time"

	_ "sukuk-be/docs" // This will be generated by swag init
)

// @title           Sukuk POC Backend API
// @version         1.0
// @description     A Web3 backend for Sukuk (Islamic bonds) on Base Testnet, providing APIs for dApps and frontends while processing blockchain events from an indexer.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.sukuk-poc.com/support
// @contact.email  support@sukuk-poc.com

// @license.name  MIT
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      backend-sukuk.kadzu.dev
// @BasePath  /api/v1
// @schemes   https http

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name X-API-Key
// @description API key for accessing protected admin endpoints

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		logger.Fatalf("Failed to load configuration: %v", err)
	}

	// Initialize logger with configuration
	logger.Init(cfg.Logger.Level, cfg.Logger.Format)
	logger.Info("Starting Sukuk POC API server")

	// Setup database (create if needed, connect, migrate)
	if err := database.SetupDatabase(cfg); err != nil {
		logger.Fatalf("Failed to setup database: %v", err)
	}
	defer database.Close()

	// Sukuk Metadata sync service (syncs from indexer to metadata table)
	metadataSyncService := services.NewSukukMetadataSyncService(5 * time.Second)
	go metadataSyncService.Start()
	defer metadataSyncService.Stop()

	// Start server
	srv := server.New(cfg)
	logger.WithField("port", cfg.App.Port).Info("Server starting")

	if err := srv.Start(); err != nil {
		logger.Fatalf("Server failed to start: %v", err)
	}
}
